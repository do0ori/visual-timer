/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { createHandlerBoundToURL, precacheAndRoute } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';
import { convertMsToMmSs } from './utils/timeUtils';

declare const self: ServiceWorkerGlobalScope;

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
    // Return false to exempt requests from being fulfilled by index.html.
    ({ request, url }: { request: Request; url: URL }) => {
        // If this isn't a navigation, skip.
        if (request.mode !== 'navigate') {
            return false;
        }

        // If this is a URL that starts with /_, skip.
        if (url.pathname.startsWith('/_')) {
            return false;
        }

        // If this looks like a URL for a resource, because it contains
        // a file extension, skip.
        if (url.pathname.match(fileExtensionRegexp)) {
            return false;
        }

        // Return true to signal that we want to use the handler.
        return true;
    },
    createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
    // Add in any other file extensions or routing criteria as needed.
    ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'),
    // Customize this strategy as needed, e.g., by changing to CacheFirst.
    new StaleWhileRevalidate({
        cacheName: 'images',
        plugins: [
            // Ensure that once this runtime cache reaches a maximum size the
            // least-recently used images are removed.
            new ExpirationPlugin({ maxEntries: 50 }),
        ],
    })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
    if (event.data && event.data.type === 'SKIP_WAITING') {
        self.skipWaiting();
    }
});

// Any other custom service worker logic can go here.
const timers: Record<string, { timeoutId: NodeJS.Timeout | undefined; intervalId: NodeJS.Timer | undefined }> = {};
const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);

self.addEventListener('message', (event) => {
    if (event.source) {
        const clientId = (event.source as Client).id;
        const { command, timer, endTime } = event.data;

        if (command === 'start-timer') {
            let remainingTime = endTime - Date.now();
            console.debug(`Starting timer with ID: ${timer.id}, Remainig Time: ${remainingTime}ms`);

            let timeoutId;
            if (remainingTime > 0) {
                timeoutId = setTimeout(async () => {
                    self.clients.matchAll({ type: 'window', includeUncontrolled: true }).then((clientList) => {
                        const targetClient = clientList.find((client) => client.id === clientId);

                        if (targetClient) {
                            targetClient.postMessage({ command: 'finished', id: timer.id });
                        } else {
                            console.warn('No matching client found for timer ID:', clientId);
                        }
                    });
                }, remainingTime);
            }

            let intervalId;
            if (!isIOS) {
                intervalId = setInterval(async () => {
                    remainingTime -= 500;

                    await self.registration.showNotification(timer.title, {
                        body: convertMsToMmSs(remainingTime),
                        icon: '/visual-timer/logo500.png',
                        tag: timer.id,
                        silent: true,
                    });
                }, 500);
            }

            timers[timer.id] = { timeoutId, intervalId };
        } else if (command === 'clear-timer') {
            console.debug(`Clearing timer with ID: ${timer.id}`);
            if (timers[timer.id]) {
                clearTimeout(timers[timer.id].timeoutId);
                clearInterval(timers[timer.id].intervalId);
                delete timers[timer.id];
            }

            const clearAllRelatedNotifications = async () => {
                while ((await self.registration.getNotifications({ tag: timer.id })).length > 0) {
                    self.registration.getNotifications({ tag: timer.id }).then((notifications) => {
                        notifications.forEach((notification) => notification.close());
                    });
                }
            };

            clearAllRelatedNotifications();
        } else {
            console.warn(`Unknown command: ${command}`);
        }
    }
});

const navigateToApp = async () => {
    const clientList = await self.clients.matchAll({
        type: 'window',
        includeUncontrolled: true,
    });

    const hadClientOpen = clientList.some((client) => {
        if (client.url.includes('/visual-timer') && 'focus' in client) {
            return client.focus();
        }
        return false;
    });

    if (!hadClientOpen) {
        if (self.clients.openWindow) {
            await self.clients.openWindow('/visual-timer');
        }
    }
};

self.addEventListener('notificationclick', (event) => {
    event.notification.close();

    event.waitUntil(navigateToApp());
});
